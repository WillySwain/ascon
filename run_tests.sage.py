

# This file was *autogenerated* from the file run_tests.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0xf0 = Integer(0xf0); _sage_const_0xe1 = Integer(0xe1); _sage_const_0xd2 = Integer(0xd2); _sage_const_0xc3 = Integer(0xc3); _sage_const_0xb4 = Integer(0xb4); _sage_const_0xa5 = Integer(0xa5); _sage_const_0x96 = Integer(0x96); _sage_const_0x87 = Integer(0x87); _sage_const_0x78 = Integer(0x78); _sage_const_0x69 = Integer(0x69); _sage_const_0x5a = Integer(0x5a); _sage_const_0x4b = Integer(0x4b); _sage_const_128 = Integer(128); _sage_const_9259414062373011456 = Integer(9259414062373011456); _sage_const_4 = Integer(4); _sage_const_0 = Integer(0)
from sage.all import Integer
load('ascon_sage.sage')
K = '00000000000000010000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111' #key 128 bits
N = '00000000000000010000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111' #nonce 128 bits
A = '00000000000000010000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111' #assoc. data 128 bits
P = '00000000000000010000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111' #plaintext arb. size
T = '' #tag 128 bits
round_constants = [_sage_const_0xf0 ,_sage_const_0xe1 ,_sage_const_0xd2 ,_sage_const_0xc3 ,_sage_const_0xb4 ,_sage_const_0xa5 ,_sage_const_0x96 ,_sage_const_0x87 ,_sage_const_0x78 ,_sage_const_0x69 ,_sage_const_0x5a ,_sage_const_0x4b ]
rate = _sage_const_128  #128 bits
IV = _sage_const_9259414062373011456 
P8 = _sage_const_4 
P12 = _sage_const_0 

def run_test(test_name, K, N, A, P):
    print(f"Test Name: {test_name}")
    try:
        ciphertext = auth_encrypt(K, N, A, P)
    except Exception as e:
         print ("Failed - encountered error in encrpytion")
         return
    CT = auth_encrypt(K,N,A,P)
    T = CT[-_sage_const_128 :]
    C = CT[:-_sage_const_128 ]     
    print("C =", C)
    print("T =", T)
    try:
        P= ver_decryption(K,N,A,C,T)
    except Exception as e:
         print ("Failed - encountered error in decryption")
         return
    print("P =", P)
    if P == '-1':
        print("Failed")
    else:
        print("Passed")

def main():
    with open("test_parameters.txt", "r") as file:
        for line in file:
            test_name, K, N, A, P = line.strip().split(",")         
            run_test(test_name, K, N, A, P)
            print()

if __name__ == "__main__":
    main()

